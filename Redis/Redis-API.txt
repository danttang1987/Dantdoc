Redis API的理解和使用
1、全局命令
  1）、查看所有键
  keys *
  2）、键总数
  dbsize
  3）、查看键值是否存在
  exists key
  4）、删除键
  del key [key ...]
  5）、设置健值过期时间
  expire key seconds
  expire tht 20
  
  ttl可查看键的过期时间
  ttl key
  大于0的整数：键的过期时间
  -1：没有设置过期时间
  -2：键值不存在
  
  6）、健的数据结构类型
  type key

2、数据结构和内部编码
查看内部编码
object encoding key
   string
     raw
	 int
	 embtr
   hash
     hashtable
	 ziplist
   lish
     linkedlist
	 ziplist
   set
     hashtable
	 intset
   zset
     skiplist
	 ziplist

3、单线程
  1）、引出单线程模型（所有命令在一个队列时排队等待被执行，不存在多个命令被同时执行）
  2）、为什么单线程还这么快：
     一、纯内存访问
	 二、非阻塞I/O,使用epoll作为I/O多路复用技术实现
	 三、单线程避免了线程切换和竞争状态产生的消耗
	 
	 问题：对每个命令的执行时间不能过长，如果过长会造成阻塞。

	 

	 
字符串
可存储简单字符串、复杂的字符串、甚至二进制，但最大不能超过512MB
1、命令
  1）、常用命令
     （1）、设置值
         set key value [ex seconds] [px milliseconds] [nx|xx]
         
         	ex seconds:为键值的过期时间(秒级)
            px milliseconds:为键值的过期时间(毫秒级)			
            nx :键值须必不存在，才可以设置成功，用于添加
			xx :与nx相反，键值须必存在，才可以设置成功，用于更新
		除set外还提供setex和setnx
		setex key seconds value
		setnx key value
		
	  （2）、获取值
	      get key
		  
	  （3）、批量设置值
	      mset key value [key value ...]
		  
	  （4）、批量获取值
	      mget key [key ...]
      
	  （5）、计数
	      incr key
		  对值做自增操作
		  值不是整数：返回错误
		  值是整数：返回自增后的结果
		  键不存在：按0值为开始自增，返回1
          除incr命令以外还有decr(自减)、incrby(自增指定数字)、decrby(自减指定数字)、incrbyfloat（自增浮点指定数字）
		  decr key
		  incrby key increment
		  decrby key decrement
		  incrbyfloat key increment
	   (6).不常用命令
	      追加值
		  append key value
		  字符长度
		  strlen key
		  设置并返回原值
		  getset key value
		  设置指定位置的字符
		  setrange key offeset value
		  获取部份字符串
		  getrange key start end
    2）.内部编码
	    int:8个字节的长度
		embstr:39个字节长度的字符串
		raw:大于39个字节长度的字符串

字符串完
##########################################################
  
  
哈希
value={{field1,value1},{field2,value2}...}
1、命令
  1）设置值
     hset key field value
  2）获取值
     hget key field
  3）删除fiele
     hdel key field [field...]
  4）计算field个数
     hlen key
  5）批量设置和获取field-value
     hmset key field value [field value ...]
	 hmget key field field [field...]
  6）判断field是否存在
     hexists key field
  7）获取所有field
     hkeys key
  8）获取所有value
     hvals key
  9）获取所有field-value
     hgetall key
	 注：在使用hgetall时如元素个数比较多，会存在阻塞Redis的可能，开发人员就尽量用hmget,如一定要使用所有field-value，可以使用hscan命令
  10）hincrby hincrbyfloat
     对field的value进行自增
  11）计算value长度
     hstrlen key field
  
 
2、内部编码
 ziplist:压缩列表，当哈希元素小于hash-max-ziplist-entries配置（默认512个），同时所有的值都小于hash-max-ziplist-value配置（64字节）时，会使用ziplist编码；
 hashtable（哈希表）：无法满足ziplist条件时使用hashtable；
 
 
 哈希完
 ###########################################
 
 列表
 list，列表中的每个字符串称为元素，可以包涵重复的元素
 1、命令
   1）、添加操作
     rpush key value [value ...]  从右边插入元素
     
	 lpush key value [value ...]  从左边插入元素
	 
	 linsert key before|after pivot value 从某个元素的前或后插入元素
	 	 
   2）、查找
     lrange key start end   获取指定范围的元素
	 lrange list1 0 -1
	 
	 lindex key index   获取指定下标的元素
	 lindex list1 -2
	 
   3）、获取列表长度
     llen key   获取列表长度
   
   4）、删除
     lpop key   从列表左侧弹出元素
	 rpop key   从列表右侧弹出元素
	 lrem key count value  删除指定的元素
	 找到 value开始删除
	 count>0:从左到右删除count个元素
	 count<0:从右到左删除count个元素
	 count=0:删除所有
	 
   5）、修改
     lset key index newvalue
	 
	 
   6）、阻塞操作
      blpop key [key ..] timeout   
	  brpop key [key ..] timeout
	  如timeout为0那么客户端会一直阻塞等下去；
	

 
 2、内部编码
 ziplist:压缩列表，当哈希元素小于list-max-ziplist-entries配置（默认512个），同时所有的值都小于list-max-ziplist-value配置（64字节）时，会使用ziplist编码；
 linkedlist（链表）：无法满足ziplist条件时使用linkedlist；

列表完
###########################################


集合
用于保存多个字符串元素，但不允许重复
一个集合可以存储2的32次方减1个
1、命令
   1）添加元素
     sadd key element [element ..]
     
	 
   2）删除元素
     srem key element
	 
	 
   3）计算元素个数
     scard key
   
   4）判断元素是否在集合中
     sismember key element
	 
	 
   5）随机从集合中返回指定个数的元素
     srandmember kdy count
	 
	 
   6）从集合随机弹出元素
      spop key
	  
   7）获取所有元素
     smembers key
     
	 
   8）求多个集合的交集
     sinter key [key ..]
	 
	 
   9）求多个集合的并集
     sunion kye [kye ..]
   
   10）求多个集合的差集
     sdiff key [key ..]
	 
	 
	 
   11）将交集、并集、差集的结果保存
     sinterstore destionation key [key ..]
	 suionstore destionation key [key ..]
	 sdiffstore destionation key [key ..]
	 
	 
   12）从集合随机弹出元素
      spop key
	  	  
2、内部编码
 intset:整数集合，当哈希元素小于set-max-intset-entries配置（默认512个）会使用intset编码；
 hashtable（链表）：无法满足intset条件时使用hashtable；	



集合完
###########################################


有序集合
用于保存多个字符串元素，但不允许重复，并有分值（score）可以排序
一个集合可以存储2的32次方减1个
1、命令
   1）添加元素
     zadd key score member [score member ..]
     有nx/xx/ch/incr四个选项
	 nx:  member须必不存在，才可以设置成功，用于添加 
	 xx:  member须必存在，才可以设置成功，用于更新
	 ch:  返回此次操作后，有序集合元素和分数发生变化的个数
	 incr: 对score做增加，相当于后面介绍的zincrby
	
   2）计算元素个数
     zcard key
	 
   3）计算成员的分数
     zscore key member
	 
   4）计算成员排名
     zrank key member    从低到高
	 zrevrank key member  从高到低
	 
   5）删除成员
     zrem key member
	
   
   6）增成员分数
	 zincrby key increment member
	 
	 
   7）返回指定排名范围的成员
     zrange     key start end [withscores]
	 zrevrange  key start end [withscores]
	 
   8）返回指定分数范围的成员
      zrangebyscore     key min max [withscore] [limit offset conut]
	  zrevrangebyscore  key min max [withscore] [limit offset conut]
	  
   9）返回指定分数范围的成员的个数
     zcount key min max
     
   10）删除指定排名内的升序元素
     zremrangebyrank key start end	 
	 
   11）删除指定分数内的元素
     zremrangebyscore key min max 
	 
	 	 
	 
###   8）求多个集合的交集
###     zinterstore destination numkeys key [key ...] [weights weight[weight ...]] [aggregate sun|min|max]
       参数说明：
	   destination：将交集结果存在这个Key中
	   numkeys:需要做交集的Key个数
	   weight :key的权重
	   [aggregate sun|min|max] ：成员交集后分数的值，默认为sum。
###	 
###   9）求多个集合的并集
       zunionstore destination numkeys key [key ...] [weights weight[weight ...]] [aggregate sun|min|max]
       参数说明：
	   destination：将交集结果存在这个Key中
	   numkeys:需要做交集的Key个数
	   weight :key的权重
	   [aggregate sun|min|max] ：成员交集后分数的值，默认为sum。
###   
###  
	  	  
2、内部编码
 ziplist:压缩列表，当哈希元素小于zset-max-ziplist-entries配置（默认128个），同时所有的值都小于zset-max-ziplist-value配置（64字节）时，会使用ziplist编码；
skiplist（跳跃表）：无法满足ziplist条件时使用skiplist；	



键管理
1、单个键管理
  1）重命名Key
  rename key newkey
  注：如新的newkey已经存在将被覆盖，可使用renamenx key newkey,命令不覆盖
  
  2）返回一个随机的键
  randomkey
  
  3）键过期
  expire key seconds
  expireat key timestamp
  ttl
  pttl
  expire key milliseconds
  expireat key timestamp-millisecond
  如果将时间设置为负数将立即删除
  
  清除过期时间
  persist key 
  
  对于字符串类型的键，执行set命令会删除过期时间；
  
  4）迁移健
  法一：
  move key db
  
  法二：
  dump+restore
  
  dump key
  restore key ttl value
  
  法三:
  migrate host port key|"" destination-db timeout [copy] [replace] [keys key key[key ..]]
  原子执行，提高迁移效率，相当于dump/restore/del三个命令组合。
  host   目标服务器
  port   目标端口
  key|""  key 3.0.6以前只能迁移一个，之后可以迁移多个
  destination-db  目标数据库索引，如是0号，就写0；
  [copy]     迁移后不删除源
  [replace]   不管目标是否有键，都进行覆盖；
  [keys key key[key ..]]   如要迁移多个键，在这里填写；
  
  
  
2、遍历键
   1）全量遍历键
   keys pattern
   keys *     遍历所有健
   keys [r,s]tang  遍历rtangt stang
   keys tang*      遍历tang开头的键
   keys [1-10]     遍历1至10的键
   
   注：keys容易导致阻塞，在生产环境中不建议使用；
   
   2）渐进式遍历
   scan cursor [match pattern] [count number]
   每次只扫描一部分键
   cursor          是必须参数，是一个游标，第一次从0开始，每次执行会返回当前的游标，直到为0表示已经结束；
   match pattern   可选参数，用于模式的匹配，与Keys相似
   count number    每次遍历键的个数，默认为10；
   
   
   

3、数据库管理

  1）切换数据库
  select dbindex
  Redis一个实例有16个数据库0-15；
  
  2）清除数据库
  flushdb    清除当前数据库
  flushall   清除所有数据库
  
  
  
    
   












